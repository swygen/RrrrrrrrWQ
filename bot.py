import logging
import random
import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from keep_alive import keep_alive

BOT_TOKEN = "8103536905:AAGvU15mezXEXz4ezRktBofP2kf1N7K7-BU"  # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Bot Token ‡¶¶‡¶ø‡¶®
ADMIN_USERNAME = "Swygen_bd"
VERIFIED_ICON = "https://iili.io/3vOicdu.png"
RULES = "1. ‡¶∏‡ßç‡¶™‡ßç‡¶Ø‡¶æ‡¶Æ ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ‡•§\n2. ‡¶Ö‡¶∂‡ßç‡¶≤‡ßÄ‡¶≤ ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶¨‡ßá‡¶® ‡¶®‡¶æ‡•§\n3. ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡ßü ‡¶•‡¶æ‡¶ï‡ßÅ‡¶®‡•§\n4. ‡¶ï‡¶æ‡¶∞‡¶ì ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶≠‡ßá‡¶∏‡¶ø ‡¶≤‡¶ô‡ßç‡¶ò‡¶® ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ‡•§"

logging.basicConfig(level=logging.INFO)

OTP_VERIFICATION = range(1)
user_otps = {}

# START
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    otp = str(random.randint(100000, 999999))
    user_otps[user.id] = otp

    # OTP ‡¶á‡¶®‡¶¨‡¶ï‡ßç‡¶∏‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
    try:
        await context.bot.send_message(
            chat_id=user.id,
            text=f"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ OTP ‡¶ï‡ßã‡¶°: *{otp}*\n\n‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶¨‡¶ü ‡¶è ‡¶ó‡¶ø‡¶Ø‡¶º‡ßá ‡¶è‡¶á ‡¶ï‡ßã‡¶°‡¶ü‡¶ø ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§",
            parse_mode="Markdown"
        )
    except:
        await update.message.reply_text("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá Bot ‡¶ï‡ßá Start ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶®: https://t.me/{}".format(context.bot.username))
        return ConversationHandler.END

    await update.message.reply_text("‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶®‡¶¨‡¶ï‡ßç‡¶∏‡ßá OTP ‡¶™‡¶æ‡¶†‡¶ø‡ßü‡ßá‡¶õ‡¶ø‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶ï‡ßã‡¶°‡¶ü‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:")
    return OTP_VERIFICATION

# OTP ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
async def otp_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    entered_otp = update.message.text.strip()

    if user.id not in user_otps or entered_otp != user_otps[user.id]:
        await update.message.reply_text("‚ùå ‡¶≠‡ßÅ‡¶≤ OTP! ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ï‡ßã‡¶°‡¶ü‡¶ø ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§")
        return OTP_VERIFICATION

    del user_otps[user.id]  # ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á ‡¶π‡¶≤‡ßá ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡¶ø

    now = datetime.datetime.now()
    mention = f"[{user.first_name}](tg://user?id={user.id})"
    badge = f"üü¶ [Verified]({VERIFIED_ICON})"

    welcome_text = (
        f"**‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ {mention} {badge}**\n\n"
        f"**‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ:** {user.first_name} {user.last_name or ''}\n"
        f"**‡¶Ü‡¶á‡¶°‡¶ø:** `{user.id}`\n"
        f"**‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ:** @{user.username or 'N/A'}\n"
        f"**‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶ì ‡¶∏‡¶Æ‡ßü:** {now.strftime('%A, %d-%m-%Y ‚Äì %I:%M %p')}\n"
        f"**‡¶¨‡¶ü ‡¶®‡¶æ‡¶Æ:** {context.bot.name}\n\n"
        f"**‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ -**\n"
        f"‚Ä¢ All Type App Development\n"
        f"‚Ä¢ All Type Website Development\n"
        f"‚Ä¢ Bot Development\n"
        f"‚Ä¢ Support IT\n"
        f"‚Ä¢ Automation\n"
        f"‚Ä¢ Promote\n"
        f"‚Ä¢ Customer Service\n\n"
        f"üåê ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü: [swygen.netlify.app](https://swygen.netlify.app/)\n\n"
        f"üìú ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶®‡¶ø‡ßü‡¶Æ‡¶æ‡¶¨‡¶≤‡ßÄ ‡¶™‡ßú‡ßÅ‡¶®: ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ 'Rules' ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®\n\n"
        f"‚ú® ‡¶∂‡ßÅ‡¶≠‡¶ï‡¶æ‡¶Æ‡¶®‡¶æ ‡¶∞‡¶á‡¶≤‡ßã!\n‚Äî *Swygen*"
    )

    keyboard = [
        [InlineKeyboardButton("üì© Contact Admin", url=f"https://t.me/{ADMIN_USERNAME}")],
        [InlineKeyboardButton("üìú Rules", callback_data="rules")]
    ]

    await update.message.reply_markdown(
        welcome_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        disable_web_page_preview=True
    )
    return ConversationHandler.END

# Rules Callback
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "rules":
        await query.message.reply_text(f"üìú **Rules:**\n\n{RULES}", parse_mode="Markdown")

# Cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
    return ConversationHandler.END

# Main
if __name__ == "__main__":
    keep_alive()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={OTP_VERIFICATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, otp_handler)]},
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.COMMAND, cancel))
    app.add_handler(MessageHandler(filters.TEXT, cancel))
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(CommandHandler("rules", button_handler))
    app.add_handler(MessageHandler(filters.ALL, cancel))
    app.add_handler(telegram.ext.CallbackQueryHandler(button_handler))

    print("‚úÖ Bot is running...")
    app.run_polling()
