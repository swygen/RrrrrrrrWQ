Telegram OTP Verification Bot with Welcome Message and Inline Buttons

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto from telegram.ext import ( ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler ) import random import string import datetime import asyncio import os from flask import Flask from threading import Thread

--- Flask keep-alive ---

app_flask = Flask('')

@app_flask.route('/') def home(): return "Bot is running!"

def run(): app_flask.run(host='0.0.0.0', port=8080)

def keep_alive(): t = Thread(target=run) t.start()

--- Bot States ---

ASKING_OTP, VERIFYING = range(2)

--- OTP Store ---

otp_data = {}

--- Command: /start ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int: user = update.effective_user otp = ''.join(random.choices(string.digits, k=6)) otp_data[user.id] = otp

try:
    await context.bot.send_message(chat_id=user.id, text=f"Your OTP is: {otp}")
except:
    await update.message.reply_text("Please start a private chat with me and press /start again: https://t.me/YourBotUsername")
    return ConversationHandler.END

await update.message.reply_text("An OTP has been sent to your inbox. Please enter it here:")
return ASKING_OTP

--- OTP Verification ---

async def verify_otp(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int: user = update.effective_user user_input = update.message.text.strip()

if user.id in otp_data and otp_data[user.id] == user_input:
    del otp_data[user.id]

    now = datetime.datetime.now()
    weekday = now.strftime('%A')
    date = now.strftime('%Y-%m-%d')
    time = now.strftime('%I:%M:%S %p')

    verified_icon_url = "https://iili.io/3vOicdu.png"
    keyboard = [
        [InlineKeyboardButton("Contact Admin", url="https://t.me/Swygen_bd")],
        [InlineKeyboardButton("‡¶∞‡ßÅ‡¶≤‡¶∏ ‡¶™‡¶°‡¶º‡ßÅ‡¶®", callback_data="rules")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    welcome_text = f"\n‚úÖ **‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ [{user.first_name}](tg://user?id={user.id})** <a href='{verified_icon_url}'> </a>\n\n"
    welcome_text += f"**‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ:** {user.first_name} {user.last_name or ''}\n"
    welcome_text += f"**‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø:** `{user.id}`\n"
    welcome_text += f"**‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ:** @{user.username or 'None'}\n"
    welcome_text += f"**‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶ì ‡¶∏‡¶Æ‡ßü:** {weekday}, {date} ‚Äì {time}\n"
    welcome_text += f"**‡¶¨‡¶ü ‡¶®‡¶æ‡¶Æ:** {context.bot.name}\n\n"

    welcome_text += "**‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ -**\n"
    welcome_text += "- All Type App Development\n"
    welcome_text += "- All Type Website Development\n"
    welcome_text += "- Bot Development\n"
    welcome_text += "- Support IT\n"
    welcome_text += "- Automation\n"
    welcome_text += "- Promote\n"
    welcome_text += "- Customer Service\n\n"
    welcome_text += "üåê ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü: https://swygen.netlify.app/\n\n"
    welcome_text += "**‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶®‡¶ø‡ßü‡¶Æ‡¶æ‡¶¨‡¶≤‡ßÄ ‡¶™‡ßú‡ßÅ‡¶® ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá‡•§**"

    await update.message.reply_html(welcome_text, reply_markup=reply_markup)
    return ConversationHandler.END
else:
    await update.message.reply_text("‚ùå ‡¶≠‡ßÅ‡¶≤ OTP‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡¶†‡¶ø‡¶ï OTP ‡¶¶‡¶ø‡¶®‡•§")
    return ASKING_OTP

--- Rules Handler ---

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE): query = update.callback_query await query.answer() if query.data == "rules": await query.message.reply_text(""" ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶æ‡¶¨‡¶≤‡ßÄ:

1. ‡¶ï‡ßã‡¶® ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶∏‡ßç‡¶™‡ßç‡¶Ø‡¶æ‡¶Æ ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ‡•§


2. ‡¶∏‡¶Æ‡ßç‡¶Æ‡¶æ‡¶®‡¶ú‡¶®‡¶ï ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§


3. ‡¶¨‡¶æ‡¶∞‡¶¨‡¶æ‡¶∞ OTP ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ‡•§


4. ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶§‡¶•‡ßç‡¶Ø ‡¶≠‡¶æ‡¶≤‡ßã‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶°‡¶º‡ßá ‡¶®‡¶ø‡¶®‡•§


5. ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ü‡¶ø‡¶Æ‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶≠‡¶¶‡ßç‡¶∞‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡ßÅ‡¶®‡•§ """, parse_mode='Markdown')



--- Main Function ---

async def main(): TOKEN = os.environ.get("BOT_TOKEN")  # Bot token should be set in env app = ApplicationBuilder().token(TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler('start', start)],
    states={
        ASKING_OTP: [MessageHandler(filters.TEXT & ~filters.COMMAND, verify_otp)],
    },
    fallbacks=[]
)

app.add_handler(conv_handler)
app.add_handler(CallbackQueryHandler(button_handler))

print("Bot is running...")
keep_alive()
await app.run_polling()

if name == 'main': import asyncio asyncio.run(main())

