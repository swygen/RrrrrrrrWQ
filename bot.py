import random
import datetime
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# OTP рж╕рзНржЯрзЛрж░ ржХрж░рж╛рж░ ржЬржирзНржп ржбрж┐ржХрж╢ржирж╛рж░рж┐
otp_data = {}

# BOT TOKEN
BOT_TOKEN = "8103536905:AAGvU15mezXEXz4ezRktBofP2kf1N7K7-BU"

# ржнрзЗрж░рж┐ржлрж┐ржХрзЗрж╢ржи ржмрзНржпрж╛ржЬ (ржлрзЗрж╕ржмрзБржХ рж╕рзНржЯрж╛ржЗрж▓ ржЗржорзЗржЬ)
VERIFIED_BADGE = '<img src="https://iili.io/3vOicdu.png" width="20"/>'

# ржирж┐рзЯржорж╛ржмрж▓рзА
RULES_TEXT = """
<b>ржирж┐рзЯржорж╛ржмрж▓рзА:</b>

1. ржХрж╛ржЙржХрзЗ ржЕржкржорж╛ржи ржХрж░ржмрзЗржи ржирж╛ред
2. ржнрзБржпрж╝рж╛ рждржерзНржп ржкрзНрж░ржжрж╛ржи ржХрж░рж▓рзЗ ржмрзНржпрж╛ржи ржХрж░рж╛ рж╣ржмрзЗред
3. ржЖржорж╛ржжрзЗрж░ рж╕рзЗржмрж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж▓рзЗ рж╢рж░рзНржд ржорзЗржирзЗ ржЪрж▓рждрзЗ рж╣ржмрзЗред
4. ржЕржЯрзЛржорзЗрж╢ржи ржмрж╛ ржмржЯ рж╕рзНржкрзНржпрж╛ржо рж╕ржорзНржкрзВрж░рзНржг ржирж┐рж╖рж┐ржжрзНржзред
5. ржЖржкржирж╛рж░ ржПржХрж╛ржЙржирзНржЯ ржирж┐рж░рж╛ржкржж рж░рж╛ржЦрзБржи, ржХрж╛рж░рзЛ рж╕рж╛ржерзЗ OTP рж╢рзЗржпрж╝рж╛рж░ ржХрж░ржмрзЗржи ржирж╛ред

<b>ржзржирзНржпржмрж╛ржж!</b>
"""

# /start ржХржорж╛ржирзНржб
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    # рж░тАНрзНржпрж╛ржирзНржбржо OTP рждрзИрж░рж┐
    otp = str(random.randint(1000, 9999))
    otp_data[user.id] = otp

    try:
        # ржЗржиржмржХрзНрж╕рзЗ OTP ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
        await context.bot.send_message(
            chat_id=user.id,
            text=f"ЁЯФР <b>ржЖржкржирж╛рж░ OTP:</b> <code>{otp}</code>\n\nржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржПржЗ OTP ржЯрж┐ ржмржЯрзЗрж░ ржЗржиржмржХрзНрж╕рзЗ рж▓рж┐ржЦрзБржиред",
            parse_mode=ParseMode.HTML
        )
        if update.message:
            await update.message.reply_text("тЬЕ ржЖржорж░рж╛ ржЖржкржирж╛рж░ ржЗржиржмржХрзНрж╕рзЗ OTP ржкрж╛ржарж┐рзЯрзЗржЫрж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ рж╕рзЗржЦрж╛ржирзЗ ржЧрж┐рзЯрзЗ ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржиред")
    except:
        if update.message:
            await update.message.reply_text(
                "тЭМ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрзНрж░ржержорзЗ ржмржЯржХрзЗ ржЗржиржмржХрзНрж╕рзЗ /start ржХрж░рзЗ ржЗржиржмржХрзНрж╕ ржЪрж╛рж▓рзБ ржХрж░рзБржиред рждрж╛рж░ржкрж░ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред"
            )

# ржЗржЙржЬрж╛рж░ OTP ржкрж╛ржарж╛рж▓рзЗ ржпрж╛ржЪрж╛ржЗ ржХрж░рж╛ рж╣ржмрзЗ
async def handle_otp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_otp = update.message.text.strip()

    if user.id in otp_data and user_otp == otp_data[user.id]:
        del otp_data[user.id]  # OTP ржорзБржЫрзЗ ржлрзЗрж▓рж╛

        now = datetime.datetime.now()
        formatted_date = now.strftime("%A, %d %B %Y тАУ %I:%M %p")

        # ржЗржирж▓рж╛ржЗржи ржмрж╛ржЯржи
        buttons = InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯУЮ Contact Admin", url="https://t.me/Swygen_bd")],
            [InlineKeyboardButton("ЁЯУЬ Rules", callback_data="show_rules")]
        ])

        # ржкрзНрж░рж┐ржорж┐рзЯрж╛ржо рж╕рзНржмрж╛ржЧрждржо ржорзЗрж╕рзЗржЬ
        welcome_msg = f"""
<b>рж╕рзНржмрж╛ржЧрждржо {user.mention_html()} {VERIFIED_BADGE} ржЖржкржирж╛рж░ ржЖржЧржоржирзЗ ржЖржорж░рж╛ ржЖржиржирзНржжрж┐ржд!</b>

<b>ржирж╛ржо:</b> {user.first_name} {user.last_name or ""}  
<b>ржЖржЗржбрж┐:</b> <code>{user.id}</code>  
<b>ржЗржЙржЬрж╛рж░ржирзЗржо:</b> @{user.username or 'N/A'}  
<b>ржмрж░рзНрждржорж╛ржи рждрж╛рж░рж┐ржЦ ржУ рж╕ржорзЯ:</b> {formatted_date}  
<b>ржмржЯ ржирж╛ржо:</b> {context.bot.name}

<b>ржЖржорж╛ржжрзЗрж░ рж╕рж╛рж░рзНржнрж┐рж╕:</b>
тАв All Type App Development  
тАв All Type Website Development  
тАв Bot Development  
тАв Support IT  
тАв Automation  
тАв Promote  
тАв Customer Service  

ЁЯМР <b>ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ:</b> https://swygen.netlify.app/

<b>ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржорж╛ржжрзЗрж░ ржирж┐рзЯржорж╛ржмрж▓рзА ржкрзЬрзБржи:</b> Rules ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи

<b>рж╢рзБржнржХрж╛ржоржирж╛ рж░ржЗрж▓рзЛ!</b>
тАФ Swygen
"""
        await update.message.reply_text(welcome_msg, parse_mode=ParseMode.HTML, reply_markup=buttons)
    else:
        await update.message.reply_text("тЭМ ржнрзБрж▓ OTP! ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ рж╕ржарж┐ржХ OTP ржжрж┐ржиред")

# рж░рзБрж▓рж╕ ржмрж╛ржЯржи ржкрзНрж░рзЗрж╕ рж╣рж▓рзЗ
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "show_rules":
        await query.edit_message_text(RULES_TEXT, parse_mode=ParseMode.HTML)

# ржЕрзНржпрж╛ржк рж░рж╛ржи
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_otp))
    app.add_handler(MessageHandler(filters.COMMAND, lambda u, c: u.message.reply_text("тЭУ ржЕржЬрж╛ржирж╛ ржХржорж╛ржирзНржбред /start ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи")))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, start))
    app.add_handler(MessageHandler(filters.StatusUpdate.LEFT_CHAT_MEMBER, lambda u, c: None))
    app.add_handler(MessageHandler(filters.StatusUpdate, lambda u, c: None))
    app.add_handler(MessageHandler(filters.ALL, lambda u, c: None))
    app.add_handler(MessageHandler(filters.COMMAND, lambda u, c: None))
    app.add_handler(MessageHandler(filters.TEXT, handle_otp))
    app.add_handler(MessageHandler(filters.Regex(".*"), handle_otp))
    app.add_handler(MessageHandler(filters.UpdateType.CALLBACK_QUERY, callback_handler))

    print("тЬЕ Bot is running...")
    app.run_polling()
