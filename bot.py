import os
import random
import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)
from flask import Flask
import threading

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

user_captcha_answers = {}
user_language = {}

app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is running!"

def keep_alive():
    app.run(host='0.0.0.0', port=8080)

# Captcha generator
def generate_captcha():
    num1 = random.randint(10, 99)
    num2 = random.randint(10, 99)
    op = random.choice(['+', '-'])
    question = f"{num1} {op} {num2}"
    answer = eval(question)
    return question, answer

# Multilingual welcome messages
def get_welcome_text(user, lang, bot_name):
    now = datetime.datetime.now(datetime.timezone.utc).astimezone(datetime.timezone(datetime.timedelta(hours=6)))
    weekday = now.strftime('%A')
    date = now.strftime('%Y-%m-%d')
    time = now.strftime('%I:%M:%S %p')

    templates = {
        "English": f"""тЬЕ <b>Welcome <a href='tg://user?id={user.id}'>{user.first_name}</a></b>

<b>Name:</b> {user.first_name} {user.last_name or ''}
<b>ID:</b> <code>{user.id}</code>
<b>Username:</b> @{user.username or 'None'}
<b>Date & Time:</b> {weekday}, {date} тАУ {time}
<b>Bot Name:</b> {bot_name}

<b>Our Services:</b>
- All Type App Development
- Website Development
- Bot Development
- Support IT
- Automation & Promote

ЁЯМР Website: https://swygen.netlify.app/
ЁЯУЛ Click the button below to read our rules.""",

        "Bangla": f"""тЬЕ <b>рж╕рзНржмрж╛ржЧрждржо <a href='tg://user?id={user.id}'>{user.first_name}</a></b>

<b>ржЖржкржирж╛рж░ ржирж╛ржо:</b> {user.first_name} {user.last_name or ''}
<b>ржЖржЗржбрж┐:</b> <code>{user.id}</code>
<b>ржЗржЙржЬрж╛рж░ржирзЗржо:</b> @{user.username or 'None'}
<b>рждрж╛рж░рж┐ржЦ ржУ рж╕ржоржпрж╝:</b> {weekday}, {date} тАУ {time}
<b>ржмржЯ ржирж╛ржо:</b> {bot_name}

<b>ржЖржорж╛ржжрзЗрж░ рж╕рж╛рж░рзНржнрж┐рж╕:</b>
- ржЕрзНржпрж╛ржк ржбрзЗржнрзЗрж▓ржкржорзЗржирзНржЯ
- ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ ржбрзЗржнрзЗрж▓ржкржорзЗржирзНржЯ
- ржмржЯ ржбрзЗржнрзЗрж▓ржкржорзЗржирзНржЯ
- ржЖржЗржЯрж┐ рж╕рж╛ржкрзЛрж░рзНржЯ
- ржЕржЯрзЛржорзЗрж╢ржи ржУ ржкрзНрж░рзЛржорзЛржЯ

ЁЯМР ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ: https://swygen.netlify.app/
ЁЯУЛ ржирж┐ржпрж╝ржорж╛ржмрж▓рзА ржЬрж╛ржирждрзЗ ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржиред""",

        "China": f"""тЬЕ <b>цмвш┐О <a href='tg://user?id={user.id}'>{user.first_name}</a></b>

хРНчз░: {user.first_name} {user.last_name or ''}
ID: <code>{user.id}</code>
чФицИ╖хРН: @{user.username or 'None'}
цЧецЬЯхТМцЧ╢щЧ┤: {weekday}, {date} тАУ {time}
цЬ║хЩиф║║хРНчз░: {bot_name}

цЬНхКбя╝Ъ
- х║ФчФих╝АхПС
- ч╜СчлЩх╝АхПС
- цЬ║хЩиф║║х╝АхПС
- цКАцЬпцФпцМБ
- шЗкхКихМЦф╕ОцОих╣┐

ЁЯМР ч╜СчлЩ: https://swygen.netlify.app/
ЁЯУЛ чВ╣хЗ╗цМЙщТоцЯечЬЛшзДхИЩуАВ""",

        "Hindi": f"""тЬЕ <b>рд╕реНрд╡рд╛рдЧрдд рд╣реИ <a href='tg://user?id={user.id}'>{user.first_name}</a></b>

<b>рдирд╛рдо:</b> {user.first_name} {user.last_name or ''}
<b>ID:</b> <code>{user.id}</code>
<b>рдпреВрдЬрд╝рд░рдиреЗрдо:</b> @{user.username or 'None'}
<b>рддрд╛рд░реАрдЦ рдФрд░ рд╕рдордп:</b> {weekday}, {date} тАУ {time}
<b>рдмреЙрдЯ рдХрд╛ рдирд╛рдо:</b> {bot_name}

<b>рд╣рдорд╛рд░реА рд╕реЗрд╡рд╛рдПрдВ:</b>
- рдРрдк рдбреЗрд╡рд▓рдкрдореЗрдВрдЯ
- рд╡реЗрдмрд╕рд╛рдЗрдЯ рдбреЗрд╡рд▓рдкрдореЗрдВрдЯ
- рдмреЙрдЯ рдбреЗрд╡рд▓рдкрдореЗрдВрдЯ
- рдЖрдИрдЯреА рд╕рдкреЛрд░реНрдЯ
- рдСрдЯреЛрдореЗрд╢рди рдФрд░ рдкреНрд░рдореЛрд╢рди

ЁЯМР рд╡реЗрдмрд╕рд╛рдЗрдЯ: https://swygen.netlify.app/
ЁЯУЛ рдирд┐рдпрдо рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдиреАрдЪреЗ рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред""",

        "Arabic": f"""тЬЕ <b>┘Е╪▒╪н╪и┘Л╪з <a href='tg://user?id={user.id}'>{user.first_name}</a></b>

<b>╪з┘Д╪з╪│┘Е:</b> {user.first_name} {user.last_name or ''}
<b>╪з┘Д┘Е╪╣╪▒┘Б:</b> <code>{user.id}</code>
<b>╪з╪│┘Е ╪з┘Д┘Е╪│╪к╪о╪п┘Е:</b> @{user.username or 'None'}
<b>╪з┘Д╪к╪з╪▒┘К╪о ┘И╪з┘Д┘И┘В╪к:</b> {weekday}, {date} тАУ {time}
<b>╪з╪│┘Е ╪з┘Д╪и┘И╪к:</b> {bot_name}

<b>╪о╪п┘Е╪з╪к┘Ж╪з:</b>
- ╪к╪╖┘И┘К╪▒ ╪з┘Д╪к╪╖╪и┘К┘В╪з╪к
- ╪к╪╖┘И┘К╪▒ ╪з┘Д┘Е┘И╪з┘В╪╣
- ╪к╪╖┘И┘К╪▒ ╪з┘Д╪и┘И╪к
- ╪з┘Д╪п╪╣┘Е ╪з┘Д┘Б┘Ж┘К
- ╪з┘Д╪г╪к┘Е╪к╪й ┘И╪з┘Д╪к╪▒┘И┘К╪м

ЁЯМР ╪з┘Д┘Е┘И┘В╪╣ ╪з┘Д╪е┘Д┘Г╪к╪▒┘И┘Ж┘К: https://swygen.netlify.app/
ЁЯУЛ ╪з╪╢╪║╪╖ ╪з┘Д╪▓╪▒ ╪г╪п┘Ж╪з┘З ┘Д┘В╪▒╪з╪б╪й ╪з┘Д┘В┘И╪з╪╣╪п."""
    }
    return templates.get(lang, templates["English"])

# Start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    question, answer = generate_captcha()
    user_captcha_answers[user.id] = answer
    user_language[user.id] = "Bangla"  # Default language

    await update.message.reply_text(
        f"ЁЯФР <b>ржнрзЗрж░рж┐ржлрж┐ржХрзЗрж╢ржирзЗрж░ ржЬржирзНржп ржирж┐ржЪрзЗрж░ ржкрзНрж░рж╢рзНржиржЯрж┐рж░ ржЙрждрзНрждрж░ ржжрж┐ржи:</b>\n\n{question} = ?",
        parse_mode="HTML"
    )

# Captcha answer handler
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id in user_captcha_answers:
        try:
            if int(update.message.text.strip()) == user_captcha_answers[user.id]:
                del user_captcha_answers[user.id]
                await send_welcome(update, context)
            else:
                await update.message.reply_text("тЭМ ржнрзБрж▓ ржЙрждрзНрждрж░! ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
        except ValueError:
            await update.message.reply_text("тЪая╕П рж╢рзБржзрзБ рж╕ржВржЦрзНржпрж╛ ржжрж┐ржиред")
    else:
        await update.message.reply_text("тЮд ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ /start ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ ржХрж░рзБржиред")

# Welcome message
async def send_welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    lang = user_language.get(user.id, "Bangla")
    text = get_welcome_text(user, lang, context.bot.name)

    keyboard = [
        [InlineKeyboardButton("ЁЯУЮ Contact Admin", url="https://t.me/Swygen_bd")],
        [InlineKeyboardButton("ЁЯУЛ рж░рзБрж▓рж╕ ржкржбрж╝рзБржи", callback_data="rules")],
        [InlineKeyboardButton("ЁЯМР Language", callback_data="language")]
    ]
    await update.message.reply_html(text, reply_markup=InlineKeyboardMarkup(keyboard))

# Callback handler
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user

    if query.data == "rules":
        await query.message.edit_text(
            "ЁЯУЛ <b>ржирж┐ржпрж╝ржорж╛ржмрж▓рзА:</b>\n"
            "1. ржЧрж╛рж▓рж┐ржЧрж╛рж▓рж╛ржЬ ржирж┐рж╖рж┐ржжрзНржз\n"
            "2. рж╕рзНржкрзНржпрж╛ржо ржирж┐рж╖рж┐ржжрзНржз\n"
            "3. ржнрзБрж▓ рждржерзНржп ржкрзНрж░ржжрж╛ржи ржерзЗржХрзЗ ржмрж┐рж░ржд ржерж╛ржХрзБржи\n"
            "4. ржирж┐ржпрж╝ржо ржнрж╛ржЩрж▓рзЗ ржмрзНржпрж╛ржи ржХрж░рж╛ рж╣рждрзЗ ржкрж╛рж░рзЗ\n\n"
            "тЬЕ ржирж┐ржпрж╝ржо ржорзЗржирзЗ ржЪрж▓рзБржиред",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("ЁЯФЩ Back", callback_data="back")]])
        )
    elif query.data == "language":
        langs = ["English", "Bangla", "China", "Hindi", "Arabic"]
        lang_buttons = [[InlineKeyboardButton(lang, callback_data=f"lang_{lang}")] for lang in langs]
        lang_buttons.append([InlineKeyboardButton("ЁЯФЩ Back", callback_data="back")])
        await query.message.edit_text("ЁЯМР <b>Select your language:</b>", parse_mode="HTML", reply_markup=InlineKeyboardMarkup(lang_buttons))
    elif query.data.startswith("lang_"):
        lang = query.data.split("_")[1]
        user_language[user.id] = lang
        await query.message.delete()
        await send_welcome(update, context)
    elif query.data == "back":
        await query.message.delete()
        await send_welcome(update, context)

# Main bot setup
if __name__ == "__main__":
    threading.Thread(target=keep_alive).start()

    bot = ApplicationBuilder().token(BOT_TOKEN).build()
    bot.add_handler(CommandHandler("start", start))
    bot.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    bot.add_handler(CallbackQueryHandler(button_handler))
    bot.run_polling()
