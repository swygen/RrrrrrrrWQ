import os
import random
import datetime
import threading
from dotenv import load_dotenv
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ChatMember
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters, ChatMemberHandler
)

# Load token from .env file
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# Initialize user data
user_captcha_answers = {}
user_language = {}

# Multilingual content with flags
menu_content = {
    "English": {
        "flag": "üá∫üá∏",
        "buttons": {
            "contact": "üìû Contact Admin",
            "rules": "üìã View Rules",
            "language": "üåê Change Language",
            "back": "üîô Back",
            "add_to_group": "‚ûï Add to Group",
            "send_message": "‚úâÔ∏è Send Message"
        },
        "rules_text": """üìã <b>Group Help Bot</b> was developed in PHP and has been online since April 13, 2016, with ongoing updates!

<b>Bot Version:</b> 10.9

<b>Bot Admins:</b> 
‚Ä¢ Developer: Swygen Official  
‚Ä¢ The Doctor: Server Manager  
‚Ä¢ Manuel: Developer  
‚Ä¢ M4R10: Support Director

‚ö†Ô∏è Bot staff cannot assist with group issues using this bot.

<b>Thanks</b> to all donors who support server and development costs, and to those who reported bugs or suggested features.

<b>We appreciate all groups who rely on our bot!</b>""",
        "group_welcome": """‚úÖ <b>Welcome {name}</b>, feel free to contact - @Swygen_bd"""
    },
    "Bangla": {
        "flag": "üáßüá©",
        "buttons": {
            "contact": "üìû ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó",
            "rules": "üìã ‡¶∞‡ßÅ‡¶≤‡¶∏ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®",
            "language": "üåê ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
            "back": "üîô ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®",
            "add_to_group": "‚ûï ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®",
            "send_message": "‚úâÔ∏è ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®"
        },
        "rules_text": """üìã <b>Group Help Bot</b> PHP-‡¶è ‡¶§‡ßà‡¶∞‡¶ø ‡¶è‡¶¨‡¶Ç ‡ßß‡ß© ‡¶è‡¶™‡ßç‡¶∞‡¶ø‡¶≤ ‡ß®‡ß¶‡ßß‡ß¨ ‡¶•‡ßá‡¶ï‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶Ü‡¶õ‡ßá ‡¶®‡¶ø‡ßü‡¶Æ‡¶ø‡¶§ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü‡¶∏‡¶π‡•§

<b>‡¶¨‡¶ü ‡¶∏‡¶Ç‡¶∏‡ßç‡¶ï‡¶∞‡¶£:</b> 10.9

<b>‡¶¨‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®:</b>  
‚Ä¢ ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶æ‡¶∞: Swygen Official  
‚Ä¢ The Doctor: ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶æ‡¶∞  
‚Ä¢ Manuel: ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶æ‡¶∞  
‚Ä¢ M4R10: ‡¶∏‡¶π‡¶æ‡ßü‡¶§‡¶æ ‡¶™‡¶∞‡¶ø‡¶ö‡¶æ‡¶≤‡¶ï

‚ö†Ô∏è ‡¶¨‡¶ü ‡¶ï‡¶∞‡ßç‡¶Æ‡ßÄ‡¶∞‡¶æ ‡¶è‡¶á ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡ßü ‡¶∏‡¶π‡¶æ‡ßü‡¶§‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá ‡¶®‡¶æ‡•§

<b>‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶</b> ‡¶∏‡¶¨‡¶æ‡¶á‡¶ï‡ßá ‡¶Ø‡¶æ‡¶∞‡¶æ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ì ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶® ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶æ‡¶ó ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶® ‡¶¨‡¶æ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶¶‡¶ø‡ßü‡ßá‡¶õ‡ßá‡¶®‡•§

<b>‡¶Ø‡ßá‡¶∏‡¶¨ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶¨‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá, ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ï‡ßÉ‡¶§‡¶ú‡ßç‡¶û‡¶§‡¶æ!</b>""",
        "group_welcome": """‚úÖ <b>Welcome {name}</b>, ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶® - @Swygen_bd"""
    }
}

# Flask app setup for keep-alive
app = Flask(__name__)

@app.route('/')
def home():
    return "Swygen Help Bot is running!"

def keep_alive():
    app.run(host='0.0.0.0', port=8080)

# Utility
def generate_captcha():
    num1 = random.randint(10, 99)
    num2 = random.randint(10, 99)
    op = random.choice(['+', '-'])
    question = f"{num1} {op} {num2}"
    answer = eval(question)
    return question, answer

def get_buttons(lang):
    buttons = menu_content[lang]["buttons"]
    return [
        [InlineKeyboardButton(buttons["contact"], url="https://t.me/Swygen_bd")],
        [InlineKeyboardButton(buttons["rules"], callback_data="rules")],
        [InlineKeyboardButton(buttons["language"], callback_data="language")],
        [InlineKeyboardButton(buttons["add_to_group"], url="https://t.me/Swygen_bot?startgroup=true")]
    ]

# Start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    question, answer = generate_captcha()
    user_captcha_answers[user.id] = answer
    user_language[user.id] = "Bangla"
    await update.message.reply_text(
        f"üîê <b>‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®:</b>\n\n{question} = ?",
        parse_mode="HTML"
    )

# Handle answers
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id in user_captcha_answers:
        try:
            if int(update.message.text.strip()) == user_captcha_answers[user.id]:
                del user_captcha_answers[user.id]
                await send_welcome(update, context, new=True)
            else:
                await update.message.reply_text("‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶â‡¶§‡ßç‡¶§‡¶∞! ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡¶ø‡¶®‡•§")
    else:
        await update.message.reply_text("‚û§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá /start ‡¶¶‡¶ø‡ßü‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

# Welcome message
async def send_welcome(update: Update, context: ContextTypes.DEFAULT_TYPE, new=False):
    user = update.effective_user
    lang = user_language.get(user.id, "Bangla")
    now = datetime.datetime.now(datetime.timezone.utc).astimezone(datetime.timezone(datetime.timedelta(hours=6)))
    weekday = now.strftime('%A')
    date = now.strftime('%Y-%m-%d')
    time = now.strftime('%I:%M:%S %p')
    text = f"""‚úÖ <b>Welcome <a href='tg://user?id={user.id}'>{user.first_name}</a></b>\n\n<b>Name:</b> {user.full_name}\n<b>ID:</b> <code>{user.id}</code>\n<b>Username:</b> @{user.username or 'None'}\n<b>Date & Time:</b> {weekday}, {date} ‚Äì {time}\n<b>Bot Name:</b> Swygen Help Bot\n\n{menu_content[lang]['rules_text']}"""
    markup = InlineKeyboardMarkup(get_buttons(lang))
    if new:
        await update.message.reply_html(text, reply_markup=markup)
    else:
        await update.callback_query.message.edit_text(text, parse_mode="HTML", reply_markup=markup)

# Button handler
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    lang = user_language.get(user.id, "Bangla")

    if query.data == "rules":
        await query.message.edit_text(menu_content[lang]['rules_text'], parse_mode="HTML")
    elif query.data == "language":
        lang_buttons = [
            [InlineKeyboardButton(f"{menu_content[l]['flag']} {l}", callback_data=f"lang_{l}")]
            for l in menu_content
        ]
        lang_buttons.append([InlineKeyboardButton(menu_content["English"]['buttons']['back'], callback_data="back")])
        await query.message.edit_text(
            text="üåê <b>Select your language:</b>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(lang_buttons)
        )
    elif query.data.startswith("lang_"):
        selected_lang = query.data.split("_")[1]
        user_language[user.id] = selected_lang
        await send_welcome(update, context, new=False)
    elif query.data == "back":
        await send_welcome(update, context, new=False)

# Group welcome
async def welcome_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    member = update.chat_member
    if member.new_chat_member.status == ChatMember.MEMBER:
        user = member.new_chat_member.user
        lang = user_language.get(user.id, "Bangla")
        message = menu_content[lang]['group_welcome'].format(name=user.first_name)
        button = InlineKeyboardButton(menu_content[lang]['buttons']['send_message'], url="https://t.me/Swygen_bd")
        await context.bot.send_message(chat_id=update.chat_member.chat.id, text=message, parse_mode="HTML", reply_markup=InlineKeyboardMarkup([[button]]))

# Run bot
if __name__ == "__main__":
    threading.Thread(target=keep_alive).start()
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(ChatMemberHandler(welcome_new_member, ChatMemberHandler.CHAT_MEMBER))
    app.run_polling()
