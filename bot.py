import os
import random
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ChatMember
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters, ChatMemberHandler
import threading
from flask import Flask

# Load token from .env file
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# Flask keep-alive setup
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is running!"

def keep_alive():
    app.run(host='0.0.0.0', port=8080)

# User Data
user_captcha_answers = {}
user_language = {}

# Menu Content
menu_content = {
    "English": {
        "flag": "üá¨üáß",
        "buttons": {
            "contact": "üìû Contact Admin",
            "rules": "üìú View Rules",
            "language": "üåê Change Language",
            "back": "üîô Back",
            "add_to_group": "‚ûï Add to Group",
            "send_message": "‚úâÔ∏è Send Message"
        },
        "rules_text": """<b>üìú Group Help Bot</b> was developed in PHP and has been online since April 13, 2016, with ongoing updates!

<b>Bot Version:</b> 10.9

<b>Bot Admins:</b> ‚Ä¢ Developer: Swygen Official ‚Ä¢ The Doctor: Server Manager ‚Ä¢ Manuel: Developer ‚Ä¢ M4R10: Support Director

‚ö†Ô∏è Bot staff cannot assist with group issues using this bot.

<b>Thanks</b> to all donors who support server and development costs, and to those who reported bugs or suggested features.

<b>We appreciate all groups who rely on our bot!</b>""",
        "group_welcome": "<b>‚úÖ Welcome to {GROUPNAME}!</b>\n\nHello {MENTION}, we're glad to have you here.\n\n<b>Basic Info:</b>\n‚Ä¢ ID: <code>{ID}</code>\n‚Ä¢ Name: {NAME}\n‚Ä¢ Username: @{USERNAME}\n‚Ä¢ Date: {DATE}\n‚Ä¢ Time: {TIME} ({WEEKDAY})\n\n<b>Our Services:</b>\n‚Ä¢ App Development\n‚Ä¢ Website Development\n‚Ä¢ Bot Development\n‚Ä¢ UI/UX Design\n‚Ä¢ Promote Service\n\n<b>Group Rules:</b>\n{RULES}\n\nIf you need help, feel free to message the admin.\n\n‚Äî <i>Swygen Official</i>"
    },
    "Bangla": {
        "flag": "üáßüá©",
        "buttons": {
            "contact": "üìû ‡¶è‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶ú‡¶ó‡¶æ‡¶ì",
            "rules": "üìú ‡¶∞‡ßÅ‡¶≤‡¶∏ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®",
            "language": "üåê ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
            "back": "üîô ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®",
            "add_to_group": "‚ûï ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®",
            "send_message": "‚úâÔ∏è ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®"
        },
        "rules_text": """<b>üìú Group Help Bot</b> PHP-‡¶è ‡¶§‡ßà‡¶∞‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßá 13 ‡¶è‡¶™‡ßç‡¶∞‡¶ø‡¶≤ 2016 ‡¶•‡ßá‡¶ï‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶Ü‡¶õ‡ßá ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ø‡¶§ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü‡¶∏‡¶π!

<b>‡¶¨‡¶ü ‡¶∏‡¶Ç‡¶∏‡ßç‡¶ï‡¶∞‡¶£:</b> 10.9

<b>‡¶¨‡¶ü ‡¶è‡¶°‡¶Æ‡¶ø‡¶®:</b> ‚Ä¢ ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶æ‡¶∞: Swygen Official ‚Ä¢ The Doctor: ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶æ‡¶∞ ‚Ä¢ Manuel: ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶æ‡¶∞ ‚Ä¢ M4R10: ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ ‡¶™‡¶∞‡¶ø‡¶ö‡¶æ‡¶≤‡¶ï

‚ö†Ô∏è ‡¶¨‡¶ü ‡¶ï‡¶∞‡ßç‡¶Æ‡ßÄ‡¶∞‡¶æ ‡¶è‡¶á ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡ßü ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø‡¶§‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá ‡¶®‡¶æ‡•§

<b>‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶</b> ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶¶‡¶æ‡¶§‡¶æ‡¶∞ ‡¶ì ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ø‡¶ï‡¶¶‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶™‡ßç‡¶∞‡¶æ‡¶∑ ‡¶ú‡¶æ‡¶®‡¶ø‡ßü‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡¶ï‡ßá ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶!

<b>‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶¨‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡¶ó‡ßÅ‡¶≤‡ßã‡¶ï‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶ï‡ßÉ‡¶§‡¶ú‡ßç‡¶û‡¶§‡¶æ!</b>""",
        "group_welcome": "<b>‚úÖ {GROUPNAME} ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ!</b>\n\n‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã {MENTION}, ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡ßá‡ßü‡ßá ‡¶ñ‡ßÅ‡¶∂‡¶ø‡•§\n\n<b>‡¶Æ‡ßÅ‡¶≤ ‡¶§‡¶•‡ßç‡¶Ø:</b>\n‚Ä¢ ‡¶Ü‡¶á‡¶°‡¶ø: <code>{ID}</code>\n‚Ä¢ ‡¶®‡¶æ‡¶Æ: {NAME}\n‚Ä¢ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ: @{USERNAME}\n‚Ä¢ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: {DATE}\n‚Ä¢ ‡¶∏‡¶Æ‡ßü: {TIME} ({WEEKDAY})\n\n<b>‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡ßá‡¶¨‡¶æ:</b>\n‚Ä¢ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü\n‚Ä¢ ‡¶ì‡ßü‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü\n‚Ä¢ ‡¶¨‡¶ü ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü\n‚Ä¢ UI/UX ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶®\n‚Ä¢ ‡¶™‡ßç‡¶∞‡¶Æ‡ßã‡¶ü ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏\n\n<b>‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶∞‡ßÅ‡¶≤‡¶∏:</b>\n{RULES}\n\n‡¶Ø‡¶¶‡¶ø ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶® ‡¶π‡ßü, ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§\n\n‚Äî <i>Swygen Official</i>"
    }
}

# Helper functions
def generate_captcha():
    num1 = random.randint(10, 99)
    num2 = random.randint(10, 99)
    op = random.choice(['+', '-'])
    question = f"{num1} {op} {num2}"
    answer = eval(question)
    return question, answer

def get_buttons(lang):
    buttons = menu_content[lang]["buttons"]
    return [
        [InlineKeyboardButton(buttons["contact"], url="https://t.me/Swygen_bd")],
        [InlineKeyboardButton(buttons["rules"], callback_data="rules")],
        [InlineKeyboardButton(buttons["language"], callback_data="language")],
        [InlineKeyboardButton(buttons["add_to_group"], url="https://t.me/Swygen_bot?startgroup=true")]
    ]

# Command Handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    question, answer = generate_captcha()
    user_captcha_answers[user.id] = answer
    user_language[user.id] = "Bangla"  # Default language is Bangla
    await update.message.reply_text(f"üîê <b>‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®:</b>\n\n{question} = ?", parse_mode="HTML")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id in user_captcha_answers:
        try:
            if int(update.message.text.strip()) == user_captcha_answers[user.id]:
                del user_captcha_answers[user.id]
                await send_welcome(update, context, new=True)
            else:
                await update.message.reply_text("‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶â‡¶§‡ßç‡¶§‡¶∞! ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡¶ø‡¶®‡•§")
    else:
        await update.message.reply_text("‚û§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá /start ‡¶¶‡¶ø‡ßü‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

async def send_welcome(update: Update, context: ContextTypes.DEFAULT_TYPE, new=False):
    user = update.effective_user
    lang = user_language.get(user.id, "Bangla")
    text = menu_content[lang]['group_welcome']
    message = text.format(
        GROUPNAME="Our Group", 
        MENTION=f"@{user.username}" if user.username else user.first_name,
        ID=user.id,
        NAME=user.first_name,
        USERNAME=user.username or "N/A",
        DATE="2025-05-13",
        TIME="10:00 AM",
        WEEKDAY="Monday",
        RULES="Please follow the group rules."
    )
    markup = InlineKeyboardMarkup(get_buttons(lang))
    if new:
        await update.message.reply_html(message, reply_markup=markup)
    else:
        await update.callback_query.message.edit_text(message, parse_mode="HTML", reply_markup=markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    lang = user_language.get(user.id, "Bangla")

    if query.data == "rules":
        await query.message.edit_text(menu_content[lang]['rules_text'], parse_mode="HTML")
    elif query.data == "language":
        lang_buttons = [
            [InlineKeyboardButton(f"{menu_content[l]['flag']} {l}", callback_data=f"lang_{l}") for l in menu_content]
        ]
        lang_buttons.append([InlineKeyboardButton(menu_content[lang]['buttons']['back'], callback_data="back")])
        await query.message.edit_text(text="üåê <b>Select your language:</b>", parse_mode="HTML", reply_markup=InlineKeyboardMarkup(lang_buttons))
    elif query.data.startswith("lang_"):
        selected_lang = query.data.split("_")[1]
        user_language[user.id] = selected_lang
        await send_welcome(update, context, new=False)
    elif query.data == "back":
        await send_welcome(update, context, new=False)

async def welcome_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    member = update.chat_member
    if member.new_chat_member.status == ChatMember.MEMBER:
        user = member.new_chat_member.user
        lang = user_language.get(user.id, "Bangla")
        message = menu_content[lang]['group_welcome'].format(
            GROUPNAME="Our Group", 
            MENTION=f"@{user.username}" if user.username else user.first_name,
            ID=user.id,
            NAME=user.first_name,
            USERNAME=user.username or "N/A",
            DATE="2025-05-13",
            TIME="10:00 AM",
            WEEKDAY="Monday",
            RULES="Please follow the group rules."
        )
        keyboard = InlineKeyboardButton(menu_content[lang]['buttons']['send_message'], url="https://t.me/Swygen_bd")
        await context.bot.send_message(chat_id=update.chat_member.chat.id, text=message, parse_mode="HTML", reply_markup=InlineKeyboardMarkup([[keyboard]]))

# Run the bot
if __name__ == "__main__":
    threading.Thread(target=keep_alive).start()
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(ChatMemberHandler(welcome_new_member, ChatMemberHandler.CHAT_MEMBER))
    app.run_polling()
